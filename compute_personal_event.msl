#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct _20
{
    ushort _m0;
    ushort _m1;
};

struct _21
{
    float _m0;
    float _m1;
    float _m2;
    float _m3;
    float _m4;
    float _m5;
};

struct _22
{
    char _m0;
    char _m1;
    char _m2;
    char _m3;
    char _m4;
    char _m5;
};

struct _23
{
    _20 _m0;
    _21 _m1;
    _22 _m2;
    char _m0_final_padding[2];
};

struct _24
{
    uchar _m0;
    uchar _m1;
    uchar _m2;
    uchar _m3;
    uchar _m4;
    uchar _m5;
};

struct _25
{
    uchar _m0;
    ushort _m1;
    _24 _m2;
};

struct _36
{
    uint _m0[4];
};

struct _37
{
    _25 _m0[1];
};

struct _39
{
    _23 _m0[1];
};

struct _40
{
    uchar _m0[1];
};

kernel void compute_personal_event(constant uint* spvBufferSizeConstants [[buffer(25)]], constant _36& _26 [[buffer(0)]], device _37& _27 [[buffer(1)]], device _39& _28 [[buffer(2)]], device _40& _29 [[buffer(3)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    bool _265 = false;
    constant uint& _27BufferSize = spvBufferSizeConstants[1];
    constant uint& _28BufferSize = spvBufferSizeConstants[2];
    constant uint& _29BufferSize = spvBufferSizeConstants[3];
    do
    {
        uint _93 = (_28BufferSize - 0) / 36;
        float2 _104 = float2(12.98980045318603515625, 78.233001708984375) * float2(float(gl_GlobalInvocationID.x));
        float _271 = _104.x + _104.y;
        float _267 = _271;
        float _109 = fract(sin(_271) * 43758.546875) * 4294967296.0;
        uint _116 = (_109 > 4294967040.0) ? 4294967295u : ((isunordered(_109, 0.0) || _109 < 0.0) ? 0u : uint(_109));
        uint _117 = _26._m0[0] + _116;
        if (gl_GlobalInvocationID.x < ((_27BufferSize - 0) / 10))
        {
            if (gl_GlobalInvocationID.y < _93)
            {
                float4 _183 = float4(_28._m0[gl_GlobalInvocationID.y]._m1._m0, _28._m0[gl_GlobalInvocationID.y]._m1._m3, _28._m0[gl_GlobalInvocationID.y]._m1._m4, _28._m0[gl_GlobalInvocationID.y]._m1._m5) * float4(float(_27._m0[gl_GlobalInvocationID.x]._m2._m0), float(_27._m0[gl_GlobalInvocationID.x]._m2._m3), float(_27._m0[gl_GlobalInvocationID.x]._m2._m4), float(_27._m0[gl_GlobalInvocationID.x]._m2._m5));
                float2 _192 = float2(_28._m0[gl_GlobalInvocationID.y]._m1._m1, _28._m0[gl_GlobalInvocationID.y]._m1._m2) * float2(float(_27._m0[gl_GlobalInvocationID.x]._m2._m2), float(_27._m0[gl_GlobalInvocationID.x]._m2._m1));
                float _280 = ((_183.x + _183.y) + _183.z) + _183.w;
                float _272 = _280;
                float _285 = _192.x + _192.y;
                float _281 = _285;
                float _196 = (_280 + _285) * 0.0039215688593685626983642578125;
                float _286 = _196;
                debugPrintfEXT("%f
", _196);
                uint _200 = _117 + (_26._m0[3] + _116);
                if ((5.9604644775390625e-08 * float(((_200 + _117) >> 8u) + 1u)) < _196)
                {
                    uint _221 = (gl_GlobalInvocationID.x * _93) + gl_GlobalInvocationID.y;
                    if (!(_221 < ((_29BufferSize - 0) / 1)))
                    {
                        for (;;)
                        {
                        }
                        break; // unreachable workaround
                    }
                    _29._m0[_221] = uchar(1);
                }
                else
                {
                }
                _265 = true;
                break;
            }
            else
            {
                for (;;)
                {
                }
                break; // unreachable workaround
            }
            break; // unreachable workaround
        }
        else
        {
            for (;;)
            {
            }
            break; // unreachable workaround
        }
        break; // unreachable workaround
    } while(false);
}

